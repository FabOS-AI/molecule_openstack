---
- name: Get galaxy info-based prefix
  ansible.builtin.include_tasks: helper/lookup_galaxy_info.yml

- name: Generate OpenSSH keypair
  community.crypto.openssh_keypair:
    path: "{{ local_key_pair_path }}"
  register: key_pair_local

- name: Create security group
  openstack.cloud.security_group:
    name: "{{ os_security_group_name }}"
    description: "{{ os_security_group_description }}"
  register: security_group

- name: Create security group rules
  openstack.cloud.security_group_rule:
    security_group: "{{ os_security_group_name }}"
    protocol: "{{ item.proto | default(omit) }}"
    port_range_min: "{{ item.port_min | default(omit) }}"
    port_range_max: "{{ item.port_max | default(omit) }}"
    remote_ip_prefix: "{{ item.cidr | default(omit) }}"
    remote_group: "{{ item.group | default(omit) }}"
    ethertype: "{{ item.ethertype | default(omit) }}"
  loop: "{{ os_security_group_rules | flatten(levels=1) }}"

- name: Print keypair name
  ansible.builtin.debug:
    var: os_key_pair_name

- name: Create openstack key pair
  openstack.cloud.keypair:
    name: "{{ os_key_pair_name }}"
    public_key: "{{ key_pair_local.public_key }}"
  register: key_pair_response

- debug:
    var: molecule_yml.platforms | flatten(levels=1)

- name: Create molecule instance(s)
  ansible.builtin.include_tasks: helper/create_instance.yml
  loop: "{{ molecule_yml.platforms | flatten(levels=1) }}"

- name: Wait till all instance info are available
  ansible.builtin.include_tasks: helper/wait_till_instance_info_avail.yml
  loop: "{{ molecule_yml.platforms | flatten(levels=1) }}"

- name: Collect instance info
  openstack.cloud.server_info:
    name: "{{ os_default_prefix }}{{ item.name }}"
  loop: "{{ molecule_yml.platforms | flatten(levels=1) }}"
  register: instance_info

- name: Flatten instance_info
  ansible.builtin.set_fact:
    server_info: "{{ server_info | default([]) + item.servers }}"
  loop: "{{ instance_info.results }}"

# Mandatory configuration for Molecule to function.
- name: Populate instance config dict
  ansible.builtin.set_fact:
    instance_conf_dict: {
      'instance': "{{ item.metadata.instance }}",
      'instance_id': "{{ item.id }}",
      'address': "{{ item.access_ipv4 }}",
      'user': "{{ item.metadata.ssh_user }}",
      'port': "{{ item.ssh_port | default(default_ssh_port) }}",
      'identity_file': "{{ local_key_pair_path }}", }
  loop: "{{ server_info }}"
  register: instance_config_dict

- name: Convert instance config dict to a list
  ansible.builtin.set_fact:
    instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

- name: Dump instance config
  ansible.builtin.copy:
    content: "{{ instance_conf | to_json | from_json | to_yaml }}"
    dest: "{{ molecule_instance_config }}"

- name: Wait for SSH and do reboot if required
  ansible.builtin.include_tasks: helper/wait_for_ssh.yml
  loop: "{{ lookup('file', molecule_instance_config) | from_yaml }}"

#- name: Test connection
#  ansible.builtin.include_tasks: test_ssh_connection.yml
#  loop: "{{ lookup('file', molecule_instance_config) | from_yaml }}"
